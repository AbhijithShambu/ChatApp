// NoSQL database structure for the chat-app
aUser(docId:(phone:string)) {
    type:string= "user/contact"
    userId:<docId>,
    name:string,
    phone:number,
    picture:string,
    description:string,
    status:string = "typing.../Active/Inactive",
    connections:[<userId>, ...],
    contacts:[<userId>, ...], 
    contactInfo:{
        <userId:{
            name:string,
            phone:number
        }, 
        ...
    }
    groupContacts:[<userId>, ...], 
    otherContacts:[<userId>, ...], 
}

aChat(docId:"IndividualChat/GroupChat:<timestamp>") {
    chatId:<docId>,
    type:string = "individual/group",
    participants:[<userId,...],
    participantsData:{
        <userId>:{
            unreadMessages:number
        },
        ...
    }
    lastActivity:timestamp,
    lastMessage:aMessage,   // Optional - if last message exists

    // Only for "group" type fieds
    name:string,
    description:string,
    picture:string,
    admins:[<userId, ...]
    createdBy:<userId>
}

aMessage(docId:"<timestamp>") {
    messageId:<docId>,
    chatId:<chatId>,
    senderId:<userId>,
    textContent:string,
    mediaContent:string, // Optional
    replyTo:aMessage,    // Optional (aMessage with minimum fields - to avoid chaining)
    linkDescription:{
        poster:string,
        title:string,
        description:string
    },                   // Optional
    reactions:{
        <reaction>:number   // Here <reaction> can be emoji and value indicates count
    },                   // Optional
    timestamp:timestamp,
    status:string,
    recipients:[senderId, <userId>, ...],
    recipientStatus:{
        <userId>:number,
        ...
    }
}

// Supported Operations 
// Get 
1) Get User info (phone)
2) Get User contacts (userId)
3) Get User chats (userId)
4) Get User messages (userId)
5) Get Chat messages (chatId)

// Post
1) Create a individual chat (user, recipient):
a) When user first finds the recipient create aChat entry


2) Send a message (user, chat, message):
a)Make connections with participants who are not connected previously in aUser
b)Increase unreadMessages count for all recipients in aChat(chat)
c)Create a new message entry in aMessage

3) Mark "Sent/Delivered" messages as read (userId, chat, messages):
a)For current participant(userId) in aChat(chat) set unreadMessages to 0
b)For each message, set current user's status as "Seen" and 
if all other recipients have status as "Seen" then 
mark entire message's status as "Seen"
    Implementation:
    1)Iterate messages starting from the most recent message
    If status for current user is already set as "Seen" or 
    if the message is sent by the current user itself then stop iterating further.
    2) During each iteration:
        Set recipient status for current user as "Seen"
        Find and set average status of the message ("Sent/Delivered/Seen" by all the recipients)
    3) Post the updated messages